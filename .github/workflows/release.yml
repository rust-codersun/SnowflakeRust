name: Build and Release

on:
  push:
    tags:
      - 'v*'   # 只有打 tag 时才自动发布
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: snowflake_server
            archive_name: snowflake_server-linux-x86_64.tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: snowflake_server.exe
            archive_name: snowflake_server-windows-x86_64.zip
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: snowflake_server
            archive_name: snowflake_server-macos-x86_64.tar.gz

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --bin snowflake_server --target ${{ matrix.target }}

      - name: Create release archive (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/
          cp README.md release/
          cp LICENSE release/
          tar -czf ${{ matrix.archive_name }} -C release .

      - name: Create release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/
          cp README.md release/
          cp LICENSE release/
          Compress-Archive -Path release/* -DestinationPath ${{ matrix.archive_name }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.archive_name }}
          path: ${{ matrix.archive_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/snowflake_server-linux-x86_64.tar.gz/snowflake_server-linux-x86_64.tar.gz
          asset_name: snowflake_server-linux-x86_64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/snowflake_server-windows-x86_64.zip/snowflake_server-windows-x86_64.zip
          asset_name: snowflake_server-windows-x86_64.zip
          asset_content_type: application/zip

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/snowflake_server-macos-x86_64.tar.gz/snowflake_server-macos-x86_64.tar.gz
          asset_name: snowflake_server-macos-x86_64.tar.gz
          asset_content_type: application/gzip